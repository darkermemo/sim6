{
  "summary": {
    "totalEndpoints": 54,
    "totalUsages": 69,
    "componentUsages": 21,
    "hookUsages": 19,
    "serviceUsages": 20
  },
  "endpoints": {
    "/api/v1/agents/fleet": [
      {
        "file": "siem_ui/src/components/AgentFleetPage.tsx",
        "type": "component",
        "context": [
          {
            "line": 80,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/fleet', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          }
        ]
      }
    ],
    "/api/v1/agents/policies": [
      {
        "file": "siem_ui/src/components/AgentFleetPage.tsx",
        "type": "component",
        "context": [
          {
            "line": 107,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/policies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          }
        ]
      },
      {
        "file": "siem_ui/src/components/AgentManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 70,
            "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/policies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          },
          {
            "line": 109,
            "context": "};\n\n      const response = await fetch('/api/v1/agents/policies', {\n        method: 'POST',\n        headers: {"
          },
          {
            "line": 151,
            "context": "};\n\n      const response = await fetch(`/api/v1/agents/policies/${selectedPolicy.policy_id}`, {\n        method: 'PUT',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/agents/download?os=${selectedOS}&arch=${selectedArch}": [
      {
        "file": "siem_ui/src/components/AgentFleetPage.tsx",
        "type": "component",
        "context": [
          {
            "line": 131,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/agents/download?os=${selectedOS}&arch=${selectedArch}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          }
        ]
      }
    ],
    "/api/v1/agents/assignments": [
      {
        "file": "siem_ui/src/components/AgentFleetPage.tsx",
        "type": "component",
        "context": [
          {
            "line": 169,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/assignments', {\n        method: 'POST',\n        headers: {"
          }
        ]
      },
      {
        "file": "siem_ui/src/components/AgentManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 189,
            "context": "};\n\n      const response = await fetch('/api/v1/agents/assignments', {\n        method: 'POST',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/agents/${selectedAgent.asset_id}/decommission": [
      {
        "file": "siem_ui/src/components/AgentFleetPage.tsx",
        "type": "component",
        "context": [
          {
            "line": 199,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/agents/${selectedAgent.asset_id}/decommission`, {\n        method: 'POST',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/agents/policies/${selectedPolicy.policy_id}": [
      {
        "file": "siem_ui/src/components/AgentManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 151,
            "context": "};\n\n      const response = await fetch(`/api/v1/agents/policies/${selectedPolicy.policy_id}`, {\n        method: 'PUT',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/parsers": [
      {
        "file": "siem_ui/src/components/InteractiveParserBuilder.tsx",
        "type": "component",
        "context": [
          {
            "line": 405,
            "context": "};\n\n      const response = await fetch('/api/v1/parsers', {\n        method: 'POST',\n        headers: {"
          }
        ]
      },
      {
        "file": "siem_ui/src/components/ParserManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 47,
            "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/parsers', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          },
          {
            "line": 80,
            "context": "};\n\n      const response = await fetch('/api/v1/parsers', {\n        method: 'POST',\n        headers: {"
          },
          {
            "line": 108,
            "context": "try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/parsers/${parserId}`, {\n        method: 'DELETE',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/parsers/${parserId}": [
      {
        "file": "siem_ui/src/components/ParserManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 108,
            "context": "try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/parsers/${parserId}`, {\n        method: 'DELETE',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/taxonomy/mappings": [
      {
        "file": "siem_ui/src/components/TaxonomyManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 67,
            "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/taxonomy/mappings', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          },
          {
            "line": 107,
            "context": "};\n\n      const response = await fetch('/api/v1/taxonomy/mappings', {\n        method: 'POST',\n        headers: {"
          },
          {
            "line": 146,
            "context": "};\n\n      const response = await fetch(`/api/v1/taxonomy/mappings/${selectedMapping.mapping_id}`, {\n        method: 'PUT',\n        headers: {"
          },
          {
            "line": 179,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/taxonomy/mappings/${mappingId}`, {\n        method: 'DELETE',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/taxonomy/mappings/${selectedMapping.mapping_id}": [
      {
        "file": "siem_ui/src/components/TaxonomyManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 146,
            "context": "};\n\n      const response = await fetch(`/api/v1/taxonomy/mappings/${selectedMapping.mapping_id}`, {\n        method: 'PUT',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/taxonomy/mappings/${mappingId}": [
      {
        "file": "siem_ui/src/components/TaxonomyManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 179,
            "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/taxonomy/mappings/${mappingId}`, {\n        method: 'DELETE',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/tenants": [
      {
        "file": "siem_ui/src/components/TenantManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 47,
            "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/tenants', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          },
          {
            "line": 78,
            "context": "};\n\n      const response = await fetch('/api/v1/tenants', {\n        method: 'POST',\n        headers: {"
          },
          {
            "line": 109,
            "context": "};\n\n      const response = await fetch(`/api/v1/tenants/${selectedTenant.tenant_id}`, {\n        method: 'PUT',\n        headers: {"
          }
        ]
      },
      {
        "file": "siem_ui/src/hooks/useTenants.ts",
        "type": "hook",
        "context": [
          {
            "line": 29,
            "context": "}\n\n      const response = await fetch('/api/v1/tenants', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
          }
        ]
      },
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 97,
            "context": "// Tenants\n  http.get('/api/v1/tenants', () => {\n    return HttpResponse.json({ success: true, data: mockTenants });\n  }),"
          }
        ]
      }
    ],
    "/api/v1/tenants/${selectedTenant.tenant_id}": [
      {
        "file": "siem_ui/src/components/TenantManagement.tsx",
        "type": "component",
        "context": [
          {
            "line": 109,
            "context": "};\n\n      const response = await fetch(`/api/v1/tenants/${selectedTenant.tenant_id}`, {\n        method: 'PUT',\n        headers: {"
          }
        ]
      }
    ],
    "/api/v1/tenants/metrics?tenant_id=${selectedTenant}": [
      {
        "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
        "type": "component",
        "context": [
          {
            "line": 88,
            "context": "// Fetch tenant metrics\n      const metricsUrl = selectedTenant \n        ? `/api/v1/tenants/metrics?tenant_id=${selectedTenant}`\n        : '/api/v1/tenants/metrics';"
          }
        ]
      }
    ],
    "/api/v1/tenants/metrics": [
      {
        "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
        "type": "component",
        "context": [
          {
            "line": 61,
            "context": "* \n * Backend endpoints:\n * - GET /api/v1/tenants/metrics - Tenant performance metrics\n * - GET /api/v1/stats/eps - Events per second statistics\n * - GET /api/v1/tenants/{id}/parsing-errors - Parsing error details"
          },
          {
            "line": 88,
            "context": "// Fetch tenant metrics\n      const metricsUrl = selectedTenant \n        ? `/api/v1/tenants/metrics?tenant_id=${selectedTenant}`\n        : '/api/v1/tenants/metrics';"
          },
          {
            "line": 89,
            "context": "const metricsUrl = selectedTenant \n        ? `/api/v1/tenants/metrics?tenant_id=${selectedTenant}`\n        : '/api/v1/tenants/metrics';\n      \n      const metricsResponse = await fetch(metricsUrl, {"
          }
        ]
      }
    ],
    "/api/v1/stats/eps?tenant_id=${selectedTenant}&hours=24": [
      {
        "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
        "type": "component",
        "context": [
          {
            "line": 107,
            "context": "// Fetch EPS stats\n      const epsUrl = selectedTenant \n        ? `/api/v1/stats/eps?tenant_id=${selectedTenant}&hours=24`\n        : '/api/v1/stats/eps?hours=24';"
          }
        ]
      }
    ],
    "/api/v1/stats/eps?hours=24": [
      {
        "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
        "type": "component",
        "context": [
          {
            "line": 108,
            "context": "const epsUrl = selectedTenant \n        ? `/api/v1/stats/eps?tenant_id=${selectedTenant}&hours=24`\n        : '/api/v1/stats/eps?hours=24';\n      \n      const epsResponse = await fetch(epsUrl, {"
          }
        ]
      }
    ],
    "/api/v1/tenants/${selectedTenant}/parsing-errors": [
      {
        "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
        "type": "component",
        "context": [
          {
            "line": 124,
            "context": "// Fetch parsing errors for selected tenant\n      if (selectedTenant) {\n        const errorsResponse = await fetch(`/api/v1/tenants/${selectedTenant}/parsing-errors`, {\n          headers: {\n            'Authorization': `Bearer ${token}`,"
          }
        ]
      }
    ],
    "/api/v1/alerts/${alertId}": [
      {
        "file": "siem_ui/src/hooks/api/useAlertDetail.ts",
        "type": "hook",
        "context": [
          {
            "line": 51,
            "context": "*/\nasync function fetchAlertDetail(alertId: string): Promise<AlertDetail> {\n  const response = await apiClient.get(`/api/v1/alerts/${alertId}`);\n  return response.data;\n}"
          }
        ]
      },
      {
        "file": "siem_ui/src/hooks/useAlerts.ts",
        "type": "hook",
        "context": [
          {
            "line": 93,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 112,
            "context": "const updateStatus = async (status: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/status`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 132,
            "context": "const updateAssignee = async (assigneeId: string | null): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/assignee`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 176,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 195,
            "context": "const addNote = async (content: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/alerts/${alertId}/notes": [
      {
        "file": "siem_ui/src/hooks/api/useAlertNotes.ts",
        "type": "hook",
        "context": [
          {
            "line": 86,
            "context": "// Make API call\n      const response = await apiClient.post(\n        `/api/v1/alerts/${alertId}/notes`,\n        { content } as CreateAlertNoteRequest\n      );"
          },
          {
            "line": 138,
            "context": "*/\nasync function fetchAlertNotes(alertId: string): Promise<AlertNote[]> {\n  const response = await apiClient.get(`/api/v1/alerts/${alertId}/notes`);\n  \n  // Handle ClickHouse JSON format"
          }
        ]
      },
      {
        "file": "siem_ui/src/hooks/useAlerts.ts",
        "type": "hook",
        "context": [
          {
            "line": 176,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 195,
            "context": "const addNote = async (content: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/log_sources": [
      {
        "file": "siem_ui/src/hooks/api/useLogSources.ts",
        "type": "hook",
        "context": [
          {
            "line": 23,
            "context": "// Stabilize SWR key to prevent infinite re-renders\n  const key = useMemo(() => {\n    return filters ? [`/api/v1/log_sources`, JSON.stringify(filters)] : '/api/v1/log_sources';\n  }, [filters?.page, filters?.limit, filters?.search, filters?.source_type]);"
          }
        ]
      },
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 102,
            "context": "// Log Sources\n  http.get('/api/v1/log_sources', () => {\n    return HttpResponse.json({ success: true, data: mockLogSources });\n  }),"
          },
          {
            "line": 106,
            "context": "}),\n\n  http.post('/api/v1/log_sources', () => {\n    return HttpResponse.json({\n      success: true,"
          }
        ]
      },
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 272,
            "context": "const queryString = params.toString();\n    const url = queryString ? `/api/v1/log_sources?${queryString}` : '/api/v1/log_sources';\n    \n    const response = await apiClient.get<LogSourceListResponse>(url);"
          },
          {
            "line": 280,
            "context": "// POST /v1/log_sources - Create a new log source (Admin only)\n  createLogSource: async (data: CreateLogSourceRequest): Promise<CreateLogSourceResponse> => {\n    const response = await apiClient.post<CreateLogSourceResponse>('/api/v1/log_sources', data);\n    return response.data;\n  },"
          },
          {
            "line": 286,
            "context": "// DELETE /v1/log_sources/{source_id} - Delete a log source (Admin only)\n  deleteLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete<{ message: string }>(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
          },
          {
            "line": 292,
            "context": "// GET /v1/log_sources/by_ip/{ip} - Internal lookup by IP\n  getLogSourceByIp: async (ip: string): Promise<LogSourceLookupResponse> => {\n    const response = await apiClient.get<LogSourceLookupResponse>(`/api/v1/log_sources/by_ip/${ip}`);\n    return response.data;\n  }"
          },
          {
            "line": 301,
            "context": "// GET /v1/log_sources/enhanced - Get enhanced log sources\n  getEnhancedLogSources: async (): Promise<{ log_sources: import('@/types/api').LogSource[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/enhanced');\n    return response.data;\n  },"
          },
          {
            "line": 307,
            "context": "// POST /v1/log_sources/enhanced - Create enhanced log source\n  createEnhancedLogSource: async (data: import('@/types/api').CreateLogSourceRequest): Promise<{ message: string; log_source_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/enhanced', data);\n    return response.data;\n  },"
          },
          {
            "line": 313,
            "context": "// PUT /v1/log_sources/{source_id} - Update log source\n  updateLogSource: async (sourceId: string, data: import('@/types/api').UpdateLogSourceRequest): Promise<{ message: string }> => {\n    const response = await apiClient.put(`/api/v1/log_sources/${sourceId}`, data);\n    return response.data;\n  },"
          },
          {
            "line": 319,
            "context": "// DELETE /v1/log_sources/{source_id} - Delete enhanced log source\n  deleteEnhancedLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
          },
          {
            "line": 325,
            "context": "// GET /v1/log_sources/stats - Get log source statistics\n  getLogSourceStats: async (): Promise<{ stats: import('@/types/api').LogSourceStats[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/stats');\n    return response.data;\n  },"
          },
          {
            "line": 331,
            "context": "// GET /v1/log_sources/groups - Get log source groups\n  getLogSourceGroups: async (): Promise<{ groups: import('@/types/api').LogSourceGroup[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/groups');\n    return response.data;\n  },"
          },
          {
            "line": 337,
            "context": "// POST /v1/log_sources/groups - Create log source group\n  createLogSourceGroup: async (data: import('@/types/api').CreateLogSourceGroupRequest): Promise<{ message: string; group_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/groups', data);\n    return response.data;\n  }"
          }
        ]
      }
    ],
    "/api/v1/rules": [
      {
        "file": "siem_ui/src/hooks/api/useRules.ts",
        "type": "hook",
        "context": [
          {
            "line": 18,
            "context": "// Stabilize the SWR key to prevent infinite re-renders\n  const key = useMemo(() => {\n    return filters ? [`/api/v1/rules`, JSON.stringify(filters)] : '/api/v1/rules';\n  }, [\n    filters?.page,"
          }
        ]
      },
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 131,
            "context": "// Rules\n  http.get('/api/v1/rules', () => {\n    return HttpResponse.json({ success: true, data: mockRules });\n  }),"
          },
          {
            "line": 135,
            "context": "}),\n\n  http.post('/api/v1/rules', () => {\n    return HttpResponse.json({\n      success: true,"
          }
        ]
      },
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 198,
            "context": "if (filters?.limit) params.append('limit', filters.limit.toString());\n    \n    const response = await apiClient.get(`/api/v1/rules?${params.toString()}`);\n    return response.data;\n  },"
          },
          {
            "line": 206,
            "context": "*/\n  getRule: async (ruleId: string) => {\n    const response = await apiClient.get(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
          },
          {
            "line": 214,
            "context": "*/\n  createRule: async (rule: import('@/types/api').CreateRuleRequest) => {\n    const response = await apiClient.post('/api/v1/rules', rule);\n    return response.data;\n  },"
          },
          {
            "line": 222,
            "context": "*/\n  createSigmaRule: async (sigmaYaml: string) => {\n    const response = await apiClient.post('/api/v1/rules/sigma', { \n      sigma_yaml: sigmaYaml \n    });"
          },
          {
            "line": 232,
            "context": "*/\n  testRule: async (query: string) => {\n    const response = await apiClient.post('/api/v1/rules/test', { query });\n    return response.data;\n  },"
          },
          {
            "line": 240,
            "context": "*/\n  updateRule: async (ruleId: string, updates: import('@/types/api').UpdateRuleRequest) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, updates);\n    return response.data;\n  },"
          },
          {
            "line": 248,
            "context": "*/\n  deleteRule: async (ruleId: string) => {\n    const response = await apiClient.delete(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
          },
          {
            "line": 256,
            "context": "*/\n  toggleRule: async (ruleId: string, enabled: boolean) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, { enabled });\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/alerts/${alertId}/status": [
      {
        "file": "siem_ui/src/hooks/api/useUpdateAlertStatus.ts",
        "type": "hook",
        "context": [
          {
            "line": 53,
            "context": "// Make API call\n      const response = await apiClient.patch(`/api/v1/alerts/${alertId}/status`, {\n        status: newStatus\n      });"
          },
          {
            "line": 135,
            "context": "try {\n          await apiClient.patch(`/api/v1/alerts/${alertId}/status`, { status });\n          results.push({ alertId, success: true });\n        } catch (error) {"
          }
        ]
      },
      {
        "file": "siem_ui/src/hooks/useAlerts.ts",
        "type": "hook",
        "context": [
          {
            "line": 112,
            "context": "const updateStatus = async (status: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/status`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          }
        ]
      },
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 177,
            "context": "*/\n  updateStatus: async (alertId: string, status: string) => {\n    const response = await apiClient.post(`/api/v1/alerts/${alertId}/status`, {\n      status,\n    });"
          }
        ]
      }
    ],
    "/api/v1/users": [
      {
        "file": "siem_ui/src/hooks/useAdmin.ts",
        "type": "hook",
        "context": [
          {
            "line": 50,
            "context": "setError(null);\n      \n      const response = await fetch('/api/v1/users', {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 71,
            "context": "setError(null);\n      \n      const response = await fetch('/api/v1/users', {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 95,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 138,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 215,
            "context": "const getUserDetails = async (userId: string): Promise<UserResponse | null> => {\n    try {\n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 231,
            "context": "const assignRole = async (data: AssignRoleRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/users/${data.user_id}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/users/${userId}/roles": [
      {
        "file": "siem_ui/src/hooks/useAdmin.ts",
        "type": "hook",
        "context": [
          {
            "line": 95,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/users/${userId}": [
      {
        "file": "siem_ui/src/hooks/useAdmin.ts",
        "type": "hook",
        "context": [
          {
            "line": 95,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 138,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 215,
            "context": "const getUserDetails = async (userId: string): Promise<UserResponse | null> => {\n    try {\n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
          }
        ]
      }
    ],
    "/api/v1/roles": [
      {
        "file": "siem_ui/src/hooks/useAdmin.ts",
        "type": "hook",
        "context": [
          {
            "line": 179,
            "context": "setError(null);\n      \n      const response = await fetch('/api/v1/roles', {\n        headers: getAuthHeaders(),\n      });"
          }
        ]
      }
    ],
    "/api/v1/users/${data.user_id}/roles": [
      {
        "file": "siem_ui/src/hooks/useAdmin.ts",
        "type": "hook",
        "context": [
          {
            "line": 231,
            "context": "const assignRole = async (data: AssignRoleRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/users/${data.user_id}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/alerts": [
      {
        "file": "siem_ui/src/hooks/useAlerts.ts",
        "type": "hook",
        "context": [
          {
            "line": 53,
            "context": "setError(null);\n      \n      const response = await fetch('/api/v1/alerts', {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 93,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 112,
            "context": "const updateStatus = async (status: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/status`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 132,
            "context": "const updateAssignee = async (assigneeId: string | null): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/assignee`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 176,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 195,
            "context": "const addNote = async (content: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          }
        ]
      },
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 121,
            "context": "// Alerts\n  http.get('/api/v1/alerts', () => {\n    return HttpResponse.json({ success: true, data: mockAlerts });\n  }),"
          }
        ]
      }
    ],
    "/api/v1/alerts/${alertId}/assignee": [
      {
        "file": "siem_ui/src/hooks/useAlerts.ts",
        "type": "hook",
        "context": [
          {
            "line": 132,
            "context": "const updateAssignee = async (assigneeId: string | null): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/assignee`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/cases": [
      {
        "file": "siem_ui/src/hooks/useCases.ts",
        "type": "hook",
        "context": [
          {
            "line": 44,
            "context": "setError(null);\n      \n      const response = await fetch('/api/v1/cases', {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 66,
            "context": "setError(null);\n      \n      const response = await fetch('/api/v1/cases', {\n        method: 'POST',\n        headers: getAuthHeaders(),"
          },
          {
            "line": 109,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 128,
            "context": "const updateCase = async (updates: UpdateCaseRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/cases/${caseId}": [
      {
        "file": "siem_ui/src/hooks/useCases.ts",
        "type": "hook",
        "context": [
          {
            "line": 109,
            "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        headers: getAuthHeaders(),\n      });"
          },
          {
            "line": 128,
            "context": "const updateCase = async (updates: UpdateCaseRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
          }
        ]
      }
    ],
    "/api/v1/dashboard${queryString ? ": [
      {
        "file": "siem_ui/src/hooks/useDashboard.ts",
        "type": "hook",
        "context": [
          {
            "line": 24,
            "context": "const queryString = params.toString();\n      const url = `/api/v1/dashboard${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await apiClient.get<DashboardResponse>(url);"
          }
        ]
      }
    ],
    "/api/v1/auth/login": [
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 76,
            "context": "export const handlers = [\n  // Authentication endpoints\n  http.post('/api/v1/auth/login', () => {\n    return HttpResponse.json({\n      success: true,"
          }
        ]
      },
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 114,
            "context": "*/\n  login: async (credentials: { email: string; password: string }) => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/health": [
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 92,
            "context": "// Health check\n  http.get('/api/v1/health', () => {\n    return HttpResponse.json({ status: 'healthy', timestamp: new Date().toISOString() });\n  }),"
          }
        ]
      }
    ],
    "/api/v1/metrics": [
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 126,
            "context": "// Metrics\n  http.get('/api/v1/metrics', () => {\n    return HttpResponse.json({ success: true, data: mockMetrics });\n  }),"
          }
        ]
      }
    ],
    "/api/v1/dashboard/kpis": [
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 150,
            "context": "// Dashboard KPIs\n  http.get('/api/v1/dashboard/kpis', () => {\n    return HttpResponse.json({\n      success: true,"
          }
        ]
      }
    ],
    "/api/v1/simulate-error": [
      {
        "file": "siem_ui/src/mocks/handlers.ts",
        "type": "other",
        "context": [
          {
            "line": 164,
            "context": "// Error simulation for testing error handling\n  http.get('/api/v1/simulate-error', () => {\n    return HttpResponse.json({ success: false, error: 'Simulated server error' }, { status: 500 });\n  }),"
          }
        ]
      }
    ],
    "/api/v1/auth/refresh": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 62,
            "context": "// Use vanilla axios to prevent infinite interceptor loops\n          const response = await axios.post(\n            `${import.meta.env.VITE_API_BASE || 'http://localhost:8080'}/api/v1/auth/refresh`,\n            { refresh_token: refreshToken },\n            {"
          },
          {
            "line": 122,
            "context": "*/\n  refresh: async (refreshToken: string) => {\n    const response = await apiClient.post('/api/v1/auth/refresh', {\n      refresh_token: refreshToken,\n    });"
          }
        ]
      }
    ],
    "/api/v1/auth/logout": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 132,
            "context": "*/\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/dashboard": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 151,
            "context": "limit?: number;\n  }) => {\n    const response = await apiClient.get('/api/v1/dashboard', { params });\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/assets/ip/${ip}": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 164,
            "context": "*/\n  getAssetByIp: async (ip: string) => {\n    const response = await apiClient.get(`/api/v1/assets/ip/${ip}`);\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/rules?${params.toString()}": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 198,
            "context": "if (filters?.limit) params.append('limit', filters.limit.toString());\n    \n    const response = await apiClient.get(`/api/v1/rules?${params.toString()}`);\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/rules/${ruleId}": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 206,
            "context": "*/\n  getRule: async (ruleId: string) => {\n    const response = await apiClient.get(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
          },
          {
            "line": 240,
            "context": "*/\n  updateRule: async (ruleId: string, updates: import('@/types/api').UpdateRuleRequest) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, updates);\n    return response.data;\n  },"
          },
          {
            "line": 248,
            "context": "*/\n  deleteRule: async (ruleId: string) => {\n    const response = await apiClient.delete(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
          },
          {
            "line": 256,
            "context": "*/\n  toggleRule: async (ruleId: string, enabled: boolean) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, { enabled });\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/rules/sigma": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 222,
            "context": "*/\n  createSigmaRule: async (sigmaYaml: string) => {\n    const response = await apiClient.post('/api/v1/rules/sigma', { \n      sigma_yaml: sigmaYaml \n    });"
          }
        ]
      }
    ],
    "/api/v1/rules/test": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 232,
            "context": "*/\n  testRule: async (query: string) => {\n    const response = await apiClient.post('/api/v1/rules/test', { query });\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/log_sources?${queryString}": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 272,
            "context": "const queryString = params.toString();\n    const url = queryString ? `/api/v1/log_sources?${queryString}` : '/api/v1/log_sources';\n    \n    const response = await apiClient.get<LogSourceListResponse>(url);"
          }
        ]
      }
    ],
    "/api/v1/log_sources/${sourceId}": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 286,
            "context": "// DELETE /v1/log_sources/{source_id} - Delete a log source (Admin only)\n  deleteLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete<{ message: string }>(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
          },
          {
            "line": 313,
            "context": "// PUT /v1/log_sources/{source_id} - Update log source\n  updateLogSource: async (sourceId: string, data: import('@/types/api').UpdateLogSourceRequest): Promise<{ message: string }> => {\n    const response = await apiClient.put(`/api/v1/log_sources/${sourceId}`, data);\n    return response.data;\n  },"
          },
          {
            "line": 319,
            "context": "// DELETE /v1/log_sources/{source_id} - Delete enhanced log source\n  deleteEnhancedLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/log_sources/by_ip/${ip}": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 292,
            "context": "// GET /v1/log_sources/by_ip/{ip} - Internal lookup by IP\n  getLogSourceByIp: async (ip: string): Promise<LogSourceLookupResponse> => {\n    const response = await apiClient.get<LogSourceLookupResponse>(`/api/v1/log_sources/by_ip/${ip}`);\n    return response.data;\n  }"
          }
        ]
      }
    ],
    "/api/v1/log_sources/enhanced": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 301,
            "context": "// GET /v1/log_sources/enhanced - Get enhanced log sources\n  getEnhancedLogSources: async (): Promise<{ log_sources: import('@/types/api').LogSource[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/enhanced');\n    return response.data;\n  },"
          },
          {
            "line": 307,
            "context": "// POST /v1/log_sources/enhanced - Create enhanced log source\n  createEnhancedLogSource: async (data: import('@/types/api').CreateLogSourceRequest): Promise<{ message: string; log_source_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/enhanced', data);\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/log_sources/stats": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 325,
            "context": "// GET /v1/log_sources/stats - Get log source statistics\n  getLogSourceStats: async (): Promise<{ stats: import('@/types/api').LogSourceStats[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/stats');\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/log_sources/groups": [
      {
        "file": "siem_ui/src/services/api.ts",
        "type": "service",
        "context": [
          {
            "line": 331,
            "context": "// GET /v1/log_sources/groups - Get log source groups\n  getLogSourceGroups: async (): Promise<{ groups: import('@/types/api').LogSourceGroup[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/groups');\n    return response.data;\n  },"
          },
          {
            "line": 337,
            "context": "// POST /v1/log_sources/groups - Create log source group\n  createLogSourceGroup: async (data: import('@/types/api').CreateLogSourceGroupRequest): Promise<{ message: string; group_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/groups', data);\n    return response.data;\n  }"
          }
        ]
      }
    ],
    "/api/v1/fields/values?${params.toString()}": [
      {
        "file": "siem_ui/src/services/fieldValuesApi.ts",
        "type": "service",
        "context": [
          {
            "line": 23,
            "context": "}\n    \n    const response = await apiClient.get(`/api/v1/fields/values?${params.toString()}`);\n    return response.data;\n  },"
          }
        ]
      }
    ],
    "/api/v1/fields/values/multiple?${params.toString()}": [
      {
        "file": "siem_ui/src/services/fieldValuesApi.ts",
        "type": "service",
        "context": [
          {
            "line": 36,
            "context": "}\n    \n    const response = await apiClient.get(`/api/v1/fields/values/multiple?${params.toString()}`);\n    return response.data;\n  },"
          }
        ]
      }
    ]
  },
  "byCategory": {
    "components": {
      "/api/v1/agents/fleet": [
        {
          "file": "siem_ui/src/components/AgentFleetPage.tsx",
          "type": "component",
          "context": [
            {
              "line": 80,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/fleet', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            }
          ]
        }
      ],
      "/api/v1/agents/policies": [
        {
          "file": "siem_ui/src/components/AgentFleetPage.tsx",
          "type": "component",
          "context": [
            {
              "line": 107,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/policies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            }
          ]
        },
        {
          "file": "siem_ui/src/components/AgentManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 70,
              "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/policies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            },
            {
              "line": 109,
              "context": "};\n\n      const response = await fetch('/api/v1/agents/policies', {\n        method: 'POST',\n        headers: {"
            },
            {
              "line": 151,
              "context": "};\n\n      const response = await fetch(`/api/v1/agents/policies/${selectedPolicy.policy_id}`, {\n        method: 'PUT',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/agents/download?os=${selectedOS}&arch=${selectedArch}": [
        {
          "file": "siem_ui/src/components/AgentFleetPage.tsx",
          "type": "component",
          "context": [
            {
              "line": 131,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/agents/download?os=${selectedOS}&arch=${selectedArch}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            }
          ]
        }
      ],
      "/api/v1/agents/assignments": [
        {
          "file": "siem_ui/src/components/AgentFleetPage.tsx",
          "type": "component",
          "context": [
            {
              "line": 169,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/agents/assignments', {\n        method: 'POST',\n        headers: {"
            }
          ]
        },
        {
          "file": "siem_ui/src/components/AgentManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 189,
              "context": "};\n\n      const response = await fetch('/api/v1/agents/assignments', {\n        method: 'POST',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/agents/${selectedAgent.asset_id}/decommission": [
        {
          "file": "siem_ui/src/components/AgentFleetPage.tsx",
          "type": "component",
          "context": [
            {
              "line": 199,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/agents/${selectedAgent.asset_id}/decommission`, {\n        method: 'POST',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/agents/policies/${selectedPolicy.policy_id}": [
        {
          "file": "siem_ui/src/components/AgentManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 151,
              "context": "};\n\n      const response = await fetch(`/api/v1/agents/policies/${selectedPolicy.policy_id}`, {\n        method: 'PUT',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/parsers": [
        {
          "file": "siem_ui/src/components/InteractiveParserBuilder.tsx",
          "type": "component",
          "context": [
            {
              "line": 405,
              "context": "};\n\n      const response = await fetch('/api/v1/parsers', {\n        method: 'POST',\n        headers: {"
            }
          ]
        },
        {
          "file": "siem_ui/src/components/ParserManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 47,
              "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/parsers', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            },
            {
              "line": 80,
              "context": "};\n\n      const response = await fetch('/api/v1/parsers', {\n        method: 'POST',\n        headers: {"
            },
            {
              "line": 108,
              "context": "try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/parsers/${parserId}`, {\n        method: 'DELETE',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/parsers/${parserId}": [
        {
          "file": "siem_ui/src/components/ParserManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 108,
              "context": "try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/parsers/${parserId}`, {\n        method: 'DELETE',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/taxonomy/mappings": [
        {
          "file": "siem_ui/src/components/TaxonomyManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 67,
              "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/taxonomy/mappings', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            },
            {
              "line": 107,
              "context": "};\n\n      const response = await fetch('/api/v1/taxonomy/mappings', {\n        method: 'POST',\n        headers: {"
            },
            {
              "line": 146,
              "context": "};\n\n      const response = await fetch(`/api/v1/taxonomy/mappings/${selectedMapping.mapping_id}`, {\n        method: 'PUT',\n        headers: {"
            },
            {
              "line": 179,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/taxonomy/mappings/${mappingId}`, {\n        method: 'DELETE',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/taxonomy/mappings/${selectedMapping.mapping_id}": [
        {
          "file": "siem_ui/src/components/TaxonomyManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 146,
              "context": "};\n\n      const response = await fetch(`/api/v1/taxonomy/mappings/${selectedMapping.mapping_id}`, {\n        method: 'PUT',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/taxonomy/mappings/${mappingId}": [
        {
          "file": "siem_ui/src/components/TaxonomyManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 179,
              "context": "try {\n      const token = localStorage.getItem('access_token');\n      const response = await fetch(`/api/v1/taxonomy/mappings/${mappingId}`, {\n        method: 'DELETE',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/tenants": [
        {
          "file": "siem_ui/src/components/TenantManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 47,
              "context": "setLoading(true);\n      const token = localStorage.getItem('access_token');\n      const response = await fetch('/api/v1/tenants', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            },
            {
              "line": 78,
              "context": "};\n\n      const response = await fetch('/api/v1/tenants', {\n        method: 'POST',\n        headers: {"
            },
            {
              "line": 109,
              "context": "};\n\n      const response = await fetch(`/api/v1/tenants/${selectedTenant.tenant_id}`, {\n        method: 'PUT',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/tenants/${selectedTenant.tenant_id}": [
        {
          "file": "siem_ui/src/components/TenantManagement.tsx",
          "type": "component",
          "context": [
            {
              "line": 109,
              "context": "};\n\n      const response = await fetch(`/api/v1/tenants/${selectedTenant.tenant_id}`, {\n        method: 'PUT',\n        headers: {"
            }
          ]
        }
      ],
      "/api/v1/tenants/metrics?tenant_id=${selectedTenant}": [
        {
          "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
          "type": "component",
          "context": [
            {
              "line": 88,
              "context": "// Fetch tenant metrics\n      const metricsUrl = selectedTenant \n        ? `/api/v1/tenants/metrics?tenant_id=${selectedTenant}`\n        : '/api/v1/tenants/metrics';"
            }
          ]
        }
      ],
      "/api/v1/tenants/metrics": [
        {
          "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
          "type": "component",
          "context": [
            {
              "line": 61,
              "context": "* \n * Backend endpoints:\n * - GET /api/v1/tenants/metrics - Tenant performance metrics\n * - GET /api/v1/stats/eps - Events per second statistics\n * - GET /api/v1/tenants/{id}/parsing-errors - Parsing error details"
            },
            {
              "line": 88,
              "context": "// Fetch tenant metrics\n      const metricsUrl = selectedTenant \n        ? `/api/v1/tenants/metrics?tenant_id=${selectedTenant}`\n        : '/api/v1/tenants/metrics';"
            },
            {
              "line": 89,
              "context": "const metricsUrl = selectedTenant \n        ? `/api/v1/tenants/metrics?tenant_id=${selectedTenant}`\n        : '/api/v1/tenants/metrics';\n      \n      const metricsResponse = await fetch(metricsUrl, {"
            }
          ]
        }
      ],
      "/api/v1/stats/eps?tenant_id=${selectedTenant}&hours=24": [
        {
          "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
          "type": "component",
          "context": [
            {
              "line": 107,
              "context": "// Fetch EPS stats\n      const epsUrl = selectedTenant \n        ? `/api/v1/stats/eps?tenant_id=${selectedTenant}&hours=24`\n        : '/api/v1/stats/eps?hours=24';"
            }
          ]
        }
      ],
      "/api/v1/stats/eps?hours=24": [
        {
          "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
          "type": "component",
          "context": [
            {
              "line": 108,
              "context": "const epsUrl = selectedTenant \n        ? `/api/v1/stats/eps?tenant_id=${selectedTenant}&hours=24`\n        : '/api/v1/stats/eps?hours=24';\n      \n      const epsResponse = await fetch(epsUrl, {"
            }
          ]
        }
      ],
      "/api/v1/tenants/${selectedTenant}/parsing-errors": [
        {
          "file": "siem_ui/src/components/TenantMetricsDashboard.tsx",
          "type": "component",
          "context": [
            {
              "line": 124,
              "context": "// Fetch parsing errors for selected tenant\n      if (selectedTenant) {\n        const errorsResponse = await fetch(`/api/v1/tenants/${selectedTenant}/parsing-errors`, {\n          headers: {\n            'Authorization': `Bearer ${token}`,"
            }
          ]
        }
      ]
    },
    "hooks": {
      "/api/v1/alerts/${alertId}": [
        {
          "file": "siem_ui/src/hooks/api/useAlertDetail.ts",
          "type": "hook",
          "context": [
            {
              "line": 51,
              "context": "*/\nasync function fetchAlertDetail(alertId: string): Promise<AlertDetail> {\n  const response = await apiClient.get(`/api/v1/alerts/${alertId}`);\n  return response.data;\n}"
            }
          ]
        },
        {
          "file": "siem_ui/src/hooks/useAlerts.ts",
          "type": "hook",
          "context": [
            {
              "line": 93,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 112,
              "context": "const updateStatus = async (status: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/status`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 132,
              "context": "const updateAssignee = async (assigneeId: string | null): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/assignee`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 176,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 195,
              "context": "const addNote = async (content: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/alerts/${alertId}/notes": [
        {
          "file": "siem_ui/src/hooks/api/useAlertNotes.ts",
          "type": "hook",
          "context": [
            {
              "line": 86,
              "context": "// Make API call\n      const response = await apiClient.post(\n        `/api/v1/alerts/${alertId}/notes`,\n        { content } as CreateAlertNoteRequest\n      );"
            },
            {
              "line": 138,
              "context": "*/\nasync function fetchAlertNotes(alertId: string): Promise<AlertNote[]> {\n  const response = await apiClient.get(`/api/v1/alerts/${alertId}/notes`);\n  \n  // Handle ClickHouse JSON format"
            }
          ]
        },
        {
          "file": "siem_ui/src/hooks/useAlerts.ts",
          "type": "hook",
          "context": [
            {
              "line": 176,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 195,
              "context": "const addNote = async (content: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/log_sources": [
        {
          "file": "siem_ui/src/hooks/api/useLogSources.ts",
          "type": "hook",
          "context": [
            {
              "line": 23,
              "context": "// Stabilize SWR key to prevent infinite re-renders\n  const key = useMemo(() => {\n    return filters ? [`/api/v1/log_sources`, JSON.stringify(filters)] : '/api/v1/log_sources';\n  }, [filters?.page, filters?.limit, filters?.search, filters?.source_type]);"
            }
          ]
        }
      ],
      "/api/v1/rules": [
        {
          "file": "siem_ui/src/hooks/api/useRules.ts",
          "type": "hook",
          "context": [
            {
              "line": 18,
              "context": "// Stabilize the SWR key to prevent infinite re-renders\n  const key = useMemo(() => {\n    return filters ? [`/api/v1/rules`, JSON.stringify(filters)] : '/api/v1/rules';\n  }, [\n    filters?.page,"
            }
          ]
        }
      ],
      "/api/v1/alerts/${alertId}/status": [
        {
          "file": "siem_ui/src/hooks/api/useUpdateAlertStatus.ts",
          "type": "hook",
          "context": [
            {
              "line": 53,
              "context": "// Make API call\n      const response = await apiClient.patch(`/api/v1/alerts/${alertId}/status`, {\n        status: newStatus\n      });"
            },
            {
              "line": 135,
              "context": "try {\n          await apiClient.patch(`/api/v1/alerts/${alertId}/status`, { status });\n          results.push({ alertId, success: true });\n        } catch (error) {"
            }
          ]
        },
        {
          "file": "siem_ui/src/hooks/useAlerts.ts",
          "type": "hook",
          "context": [
            {
              "line": 112,
              "context": "const updateStatus = async (status: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/status`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/users": [
        {
          "file": "siem_ui/src/hooks/useAdmin.ts",
          "type": "hook",
          "context": [
            {
              "line": 50,
              "context": "setError(null);\n      \n      const response = await fetch('/api/v1/users', {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 71,
              "context": "setError(null);\n      \n      const response = await fetch('/api/v1/users', {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 95,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 138,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 215,
              "context": "const getUserDetails = async (userId: string): Promise<UserResponse | null> => {\n    try {\n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 231,
              "context": "const assignRole = async (data: AssignRoleRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/users/${data.user_id}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/users/${userId}/roles": [
        {
          "file": "siem_ui/src/hooks/useAdmin.ts",
          "type": "hook",
          "context": [
            {
              "line": 95,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/users/${userId}": [
        {
          "file": "siem_ui/src/hooks/useAdmin.ts",
          "type": "hook",
          "context": [
            {
              "line": 95,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 138,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 215,
              "context": "const getUserDetails = async (userId: string): Promise<UserResponse | null> => {\n    try {\n      const response = await fetch(`/api/v1/users/${userId}`, {\n        headers: getAuthHeaders(),\n      });"
            }
          ]
        }
      ],
      "/api/v1/roles": [
        {
          "file": "siem_ui/src/hooks/useAdmin.ts",
          "type": "hook",
          "context": [
            {
              "line": 179,
              "context": "setError(null);\n      \n      const response = await fetch('/api/v1/roles', {\n        headers: getAuthHeaders(),\n      });"
            }
          ]
        }
      ],
      "/api/v1/users/${data.user_id}/roles": [
        {
          "file": "siem_ui/src/hooks/useAdmin.ts",
          "type": "hook",
          "context": [
            {
              "line": 231,
              "context": "const assignRole = async (data: AssignRoleRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/users/${data.user_id}/roles`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/alerts": [
        {
          "file": "siem_ui/src/hooks/useAlerts.ts",
          "type": "hook",
          "context": [
            {
              "line": 53,
              "context": "setError(null);\n      \n      const response = await fetch('/api/v1/alerts', {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 93,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 112,
              "context": "const updateStatus = async (status: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/status`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 132,
              "context": "const updateAssignee = async (assigneeId: string | null): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/assignee`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 176,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 195,
              "context": "const addNote = async (content: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/notes`, {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/alerts/${alertId}/assignee": [
        {
          "file": "siem_ui/src/hooks/useAlerts.ts",
          "type": "hook",
          "context": [
            {
              "line": 132,
              "context": "const updateAssignee = async (assigneeId: string | null): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/alerts/${alertId}/assignee`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/cases": [
        {
          "file": "siem_ui/src/hooks/useCases.ts",
          "type": "hook",
          "context": [
            {
              "line": 44,
              "context": "setError(null);\n      \n      const response = await fetch('/api/v1/cases', {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 66,
              "context": "setError(null);\n      \n      const response = await fetch('/api/v1/cases', {\n        method: 'POST',\n        headers: getAuthHeaders(),"
            },
            {
              "line": 109,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 128,
              "context": "const updateCase = async (updates: UpdateCaseRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/cases/${caseId}": [
        {
          "file": "siem_ui/src/hooks/useCases.ts",
          "type": "hook",
          "context": [
            {
              "line": 109,
              "context": "setError(null);\n      \n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        headers: getAuthHeaders(),\n      });"
            },
            {
              "line": 128,
              "context": "const updateCase = async (updates: UpdateCaseRequest): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/v1/cases/${caseId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),"
            }
          ]
        }
      ],
      "/api/v1/dashboard${queryString ? ": [
        {
          "file": "siem_ui/src/hooks/useDashboard.ts",
          "type": "hook",
          "context": [
            {
              "line": 24,
              "context": "const queryString = params.toString();\n      const url = `/api/v1/dashboard${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await apiClient.get<DashboardResponse>(url);"
            }
          ]
        }
      ],
      "/api/v1/tenants": [
        {
          "file": "siem_ui/src/hooks/useTenants.ts",
          "type": "hook",
          "context": [
            {
              "line": 29,
              "context": "}\n\n      const response = await fetch('/api/v1/tenants', {\n        headers: {\n          'Authorization': `Bearer ${token}`,"
            }
          ]
        }
      ]
    },
    "services": {
      "/api/v1/auth/login": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 114,
              "context": "*/\n  login: async (credentials: { email: string; password: string }) => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/auth/refresh": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 62,
              "context": "// Use vanilla axios to prevent infinite interceptor loops\n          const response = await axios.post(\n            `${import.meta.env.VITE_API_BASE || 'http://localhost:8080'}/api/v1/auth/refresh`,\n            { refresh_token: refreshToken },\n            {"
            },
            {
              "line": 122,
              "context": "*/\n  refresh: async (refreshToken: string) => {\n    const response = await apiClient.post('/api/v1/auth/refresh', {\n      refresh_token: refreshToken,\n    });"
            }
          ]
        }
      ],
      "/api/v1/auth/logout": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 132,
              "context": "*/\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/dashboard": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 151,
              "context": "limit?: number;\n  }) => {\n    const response = await apiClient.get('/api/v1/dashboard', { params });\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/assets/ip/${ip}": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 164,
              "context": "*/\n  getAssetByIp: async (ip: string) => {\n    const response = await apiClient.get(`/api/v1/assets/ip/${ip}`);\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/alerts/${alertId}/status": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 177,
              "context": "*/\n  updateStatus: async (alertId: string, status: string) => {\n    const response = await apiClient.post(`/api/v1/alerts/${alertId}/status`, {\n      status,\n    });"
            }
          ]
        }
      ],
      "/api/v1/rules?${params.toString()}": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 198,
              "context": "if (filters?.limit) params.append('limit', filters.limit.toString());\n    \n    const response = await apiClient.get(`/api/v1/rules?${params.toString()}`);\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/rules/${ruleId}": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 206,
              "context": "*/\n  getRule: async (ruleId: string) => {\n    const response = await apiClient.get(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
            },
            {
              "line": 240,
              "context": "*/\n  updateRule: async (ruleId: string, updates: import('@/types/api').UpdateRuleRequest) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, updates);\n    return response.data;\n  },"
            },
            {
              "line": 248,
              "context": "*/\n  deleteRule: async (ruleId: string) => {\n    const response = await apiClient.delete(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
            },
            {
              "line": 256,
              "context": "*/\n  toggleRule: async (ruleId: string, enabled: boolean) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, { enabled });\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/rules": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 198,
              "context": "if (filters?.limit) params.append('limit', filters.limit.toString());\n    \n    const response = await apiClient.get(`/api/v1/rules?${params.toString()}`);\n    return response.data;\n  },"
            },
            {
              "line": 206,
              "context": "*/\n  getRule: async (ruleId: string) => {\n    const response = await apiClient.get(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
            },
            {
              "line": 214,
              "context": "*/\n  createRule: async (rule: import('@/types/api').CreateRuleRequest) => {\n    const response = await apiClient.post('/api/v1/rules', rule);\n    return response.data;\n  },"
            },
            {
              "line": 222,
              "context": "*/\n  createSigmaRule: async (sigmaYaml: string) => {\n    const response = await apiClient.post('/api/v1/rules/sigma', { \n      sigma_yaml: sigmaYaml \n    });"
            },
            {
              "line": 232,
              "context": "*/\n  testRule: async (query: string) => {\n    const response = await apiClient.post('/api/v1/rules/test', { query });\n    return response.data;\n  },"
            },
            {
              "line": 240,
              "context": "*/\n  updateRule: async (ruleId: string, updates: import('@/types/api').UpdateRuleRequest) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, updates);\n    return response.data;\n  },"
            },
            {
              "line": 248,
              "context": "*/\n  deleteRule: async (ruleId: string) => {\n    const response = await apiClient.delete(`/api/v1/rules/${ruleId}`);\n    return response.data;\n  },"
            },
            {
              "line": 256,
              "context": "*/\n  toggleRule: async (ruleId: string, enabled: boolean) => {\n    const response = await apiClient.put(`/api/v1/rules/${ruleId}`, { enabled });\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/rules/sigma": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 222,
              "context": "*/\n  createSigmaRule: async (sigmaYaml: string) => {\n    const response = await apiClient.post('/api/v1/rules/sigma', { \n      sigma_yaml: sigmaYaml \n    });"
            }
          ]
        }
      ],
      "/api/v1/rules/test": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 232,
              "context": "*/\n  testRule: async (query: string) => {\n    const response = await apiClient.post('/api/v1/rules/test', { query });\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/log_sources?${queryString}": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 272,
              "context": "const queryString = params.toString();\n    const url = queryString ? `/api/v1/log_sources?${queryString}` : '/api/v1/log_sources';\n    \n    const response = await apiClient.get<LogSourceListResponse>(url);"
            }
          ]
        }
      ],
      "/api/v1/log_sources": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 272,
              "context": "const queryString = params.toString();\n    const url = queryString ? `/api/v1/log_sources?${queryString}` : '/api/v1/log_sources';\n    \n    const response = await apiClient.get<LogSourceListResponse>(url);"
            },
            {
              "line": 280,
              "context": "// POST /v1/log_sources - Create a new log source (Admin only)\n  createLogSource: async (data: CreateLogSourceRequest): Promise<CreateLogSourceResponse> => {\n    const response = await apiClient.post<CreateLogSourceResponse>('/api/v1/log_sources', data);\n    return response.data;\n  },"
            },
            {
              "line": 286,
              "context": "// DELETE /v1/log_sources/{source_id} - Delete a log source (Admin only)\n  deleteLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete<{ message: string }>(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
            },
            {
              "line": 292,
              "context": "// GET /v1/log_sources/by_ip/{ip} - Internal lookup by IP\n  getLogSourceByIp: async (ip: string): Promise<LogSourceLookupResponse> => {\n    const response = await apiClient.get<LogSourceLookupResponse>(`/api/v1/log_sources/by_ip/${ip}`);\n    return response.data;\n  }"
            },
            {
              "line": 301,
              "context": "// GET /v1/log_sources/enhanced - Get enhanced log sources\n  getEnhancedLogSources: async (): Promise<{ log_sources: import('@/types/api').LogSource[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/enhanced');\n    return response.data;\n  },"
            },
            {
              "line": 307,
              "context": "// POST /v1/log_sources/enhanced - Create enhanced log source\n  createEnhancedLogSource: async (data: import('@/types/api').CreateLogSourceRequest): Promise<{ message: string; log_source_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/enhanced', data);\n    return response.data;\n  },"
            },
            {
              "line": 313,
              "context": "// PUT /v1/log_sources/{source_id} - Update log source\n  updateLogSource: async (sourceId: string, data: import('@/types/api').UpdateLogSourceRequest): Promise<{ message: string }> => {\n    const response = await apiClient.put(`/api/v1/log_sources/${sourceId}`, data);\n    return response.data;\n  },"
            },
            {
              "line": 319,
              "context": "// DELETE /v1/log_sources/{source_id} - Delete enhanced log source\n  deleteEnhancedLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
            },
            {
              "line": 325,
              "context": "// GET /v1/log_sources/stats - Get log source statistics\n  getLogSourceStats: async (): Promise<{ stats: import('@/types/api').LogSourceStats[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/stats');\n    return response.data;\n  },"
            },
            {
              "line": 331,
              "context": "// GET /v1/log_sources/groups - Get log source groups\n  getLogSourceGroups: async (): Promise<{ groups: import('@/types/api').LogSourceGroup[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/groups');\n    return response.data;\n  },"
            },
            {
              "line": 337,
              "context": "// POST /v1/log_sources/groups - Create log source group\n  createLogSourceGroup: async (data: import('@/types/api').CreateLogSourceGroupRequest): Promise<{ message: string; group_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/groups', data);\n    return response.data;\n  }"
            }
          ]
        }
      ],
      "/api/v1/log_sources/${sourceId}": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 286,
              "context": "// DELETE /v1/log_sources/{source_id} - Delete a log source (Admin only)\n  deleteLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete<{ message: string }>(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
            },
            {
              "line": 313,
              "context": "// PUT /v1/log_sources/{source_id} - Update log source\n  updateLogSource: async (sourceId: string, data: import('@/types/api').UpdateLogSourceRequest): Promise<{ message: string }> => {\n    const response = await apiClient.put(`/api/v1/log_sources/${sourceId}`, data);\n    return response.data;\n  },"
            },
            {
              "line": 319,
              "context": "// DELETE /v1/log_sources/{source_id} - Delete enhanced log source\n  deleteEnhancedLogSource: async (sourceId: string): Promise<{ message: string }> => {\n    const response = await apiClient.delete(`/api/v1/log_sources/${sourceId}`);\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/log_sources/by_ip/${ip}": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 292,
              "context": "// GET /v1/log_sources/by_ip/{ip} - Internal lookup by IP\n  getLogSourceByIp: async (ip: string): Promise<LogSourceLookupResponse> => {\n    const response = await apiClient.get<LogSourceLookupResponse>(`/api/v1/log_sources/by_ip/${ip}`);\n    return response.data;\n  }"
            }
          ]
        }
      ],
      "/api/v1/log_sources/enhanced": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 301,
              "context": "// GET /v1/log_sources/enhanced - Get enhanced log sources\n  getEnhancedLogSources: async (): Promise<{ log_sources: import('@/types/api').LogSource[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/enhanced');\n    return response.data;\n  },"
            },
            {
              "line": 307,
              "context": "// POST /v1/log_sources/enhanced - Create enhanced log source\n  createEnhancedLogSource: async (data: import('@/types/api').CreateLogSourceRequest): Promise<{ message: string; log_source_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/enhanced', data);\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/log_sources/stats": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 325,
              "context": "// GET /v1/log_sources/stats - Get log source statistics\n  getLogSourceStats: async (): Promise<{ stats: import('@/types/api').LogSourceStats[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/stats');\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/log_sources/groups": [
        {
          "file": "siem_ui/src/services/api.ts",
          "type": "service",
          "context": [
            {
              "line": 331,
              "context": "// GET /v1/log_sources/groups - Get log source groups\n  getLogSourceGroups: async (): Promise<{ groups: import('@/types/api').LogSourceGroup[] }> => {\n    const response = await apiClient.get('/api/v1/log_sources/groups');\n    return response.data;\n  },"
            },
            {
              "line": 337,
              "context": "// POST /v1/log_sources/groups - Create log source group\n  createLogSourceGroup: async (data: import('@/types/api').CreateLogSourceGroupRequest): Promise<{ message: string; group_id: string }> => {\n    const response = await apiClient.post('/api/v1/log_sources/groups', data);\n    return response.data;\n  }"
            }
          ]
        }
      ],
      "/api/v1/fields/values?${params.toString()}": [
        {
          "file": "siem_ui/src/services/fieldValuesApi.ts",
          "type": "service",
          "context": [
            {
              "line": 23,
              "context": "}\n    \n    const response = await apiClient.get(`/api/v1/fields/values?${params.toString()}`);\n    return response.data;\n  },"
            }
          ]
        }
      ],
      "/api/v1/fields/values/multiple?${params.toString()}": [
        {
          "file": "siem_ui/src/services/fieldValuesApi.ts",
          "type": "service",
          "context": [
            {
              "line": 36,
              "context": "}\n    \n    const response = await apiClient.get(`/api/v1/fields/values/multiple?${params.toString()}`);\n    return response.data;\n  },"
            }
          ]
        }
      ]
    }
  }
}