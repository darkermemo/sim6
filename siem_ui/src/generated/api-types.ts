/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/log_sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all log sources for the tenant
         * @description Retrieves all log sources configured for the authenticated user's tenant.
         *     Requires Admin role permissions.
         */
        get: operations["list_log_sources"];
        put?: never;
        /**
         * Create a new log source configuration
         * @description Creates a new log source configuration for the authenticated tenant.
         *     Requires Admin role permissions.
         */
        post: operations["create_log_source"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/log_sources/by_ip/{ip}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Look up log source by IP address
         * @description Internal endpoint for consumer service to look up log source configuration by IP address.
         *     No authentication required for internal service communication.
         */
        get: operations["get_log_source_by_ip"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/log_sources/cache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all log sources for caching
         * @description Internal endpoint to retrieve all log sources for caching purposes.
         *     Used by consumer and other internal services.
         */
        get: operations["get_log_sources_cache"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/log_sources/{source_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a log source configuration
         * @description Deletes a log source configuration by ID.
         *     Requires Admin role permissions and the source must belong to the user's tenant.
         */
        delete: operations["delete_log_source"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ueba/baselines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all baselines for a tenant (with pagination) */
        get: operations["list_baselines"];
        put?: never;
        /** Create behavioral baselines (service-to-service endpoint) */
        post: operations["create_baselines"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ueba/baselines/entity/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get behavioral baseline for a specific entity */
        get: operations["get_entity_baselines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaselineResponse: {
            baseline: components["schemas"]["BehavioralBaseline"];
        };
        BaselinesListResponse: {
            count: number;
            data: components["schemas"]["BehavioralBaseline"][];
        };
        BehavioralBaseline: {
            baseline_id: string;
            /** Format: double */
            baseline_value_avg: number;
            /** Format: double */
            baseline_value_stddev: number;
            /** Format: int32 */
            calculation_period_days: number;
            /** Format: double */
            confidence_score: number;
            /** Format: int32 */
            created_at: number;
            entity_id: string;
            entity_type: string;
            /** Format: int32 */
            last_updated: number;
            metric: string;
            /** Format: int32 */
            sample_count: number;
            tenant_id: string;
        };
        Claims: {
            exp: number;
            roles: string[];
            sub: string;
            tid: string;
        };
        CreateBaselinesRequest: {
            baselines: components["schemas"]["BehavioralBaseline"][];
        };
        CreateLogSourceGroupRequest: {
            description: string;
            log_source_ids: string[];
            name: string;
        };
        CreateLogSourceRequest: {
            source_ip: string;
            source_name: string;
            source_type: string;
        };
        CreateLogSourceResponse: {
            message: string;
            source_id: string;
        };
        EntityBaselinesResponse: {
            baselines: components["schemas"]["BehavioralBaseline"][];
            count: number;
            entity_id: string;
            entity_type: string;
        };
        Event: {
            event_action: string;
            event_category: string;
            event_id: string;
            event_outcome: string;
            /** Format: int32 */
            event_timestamp: number;
            /** Format: int32 */
            ingestion_timestamp: number;
            log_source_id?: string | null;
            parse_error_msg?: string | null;
            parsing_status?: string | null;
            raw_event: string;
            source_ip: string;
            source_type: string;
            tenant_id: string;
        };
        EventFilter: {
            field: string;
            operator: string;
            value: string;
        };
        EventSearchRequest: {
            filters?: components["schemas"]["EventFilter"][] | null;
            free_text?: string | null;
            /** Format: int32 */
            limit?: number | null;
            /** Format: int32 */
            offset?: number | null;
            sort?: components["schemas"]["SortConfig"] | null;
            time_range?: components["schemas"]["TimeRange"] | null;
        };
        EventSearchResponse: {
            events: components["schemas"]["Event"][];
            has_more: boolean;
            /** Format: int32 */
            total_count: number;
        };
        IngestRequest: {
            events: components["schemas"]["NewEventData"][];
        };
        LogSource: {
            /** Format: int32 */
            created_at: number;
            source_id: string;
            source_ip: string;
            source_name: string;
            source_type: string;
            tenant_id: string;
        };
        LogSourceGroup: {
            created_at: string;
            description: string;
            group_id: string;
            log_source_ids: string[];
            name: string;
            tenant_id: string;
            updated_at: string;
        };
        LogSourceListResponse: {
            log_sources: components["schemas"]["LogSource"][];
            total: number;
        };
        LogSourceLookupResponse: {
            source_name: string;
            source_type: string;
        };
        LogSourceStats: {
            /** Format: float */
            eps: number;
            /** Format: int64 */
            event_count: number;
            last_seen: string;
            log_source_id: string;
            /** Format: int64 */
            parse_failures: number;
            /** Format: int64 */
            parse_partials: number;
        };
        NewEventData: {
            raw_log: string;
            source_ip: string;
        };
        PaginationParams: {
            entity_type?: string | null;
            /** Format: int32 */
            limit?: number | null;
            /** Format: int32 */
            offset?: number | null;
        };
        SortConfig: {
            direction: string;
            field: string;
        };
        StatefulConfig: {
            aggregate_on: string[];
            key_prefix: string;
            /** Format: int32 */
            threshold: number;
            /** Format: int32 */
            window_seconds: number;
        };
        TimeRange: {
            /** Format: int32 */
            end_unix: number;
            /** Format: int32 */
            start_unix: number;
        };
        UpdateLogSourceRequest: {
            name?: string | null;
            parser_id?: string | null;
            status?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_log_sources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of log sources */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogSourceListResponse"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_log_source: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLogSourceRequest"];
            };
        };
        responses: {
            /** @description Log source created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateLogSourceResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Log source with this IP already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_log_source_by_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description IP address to look up */
                ip: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Log source found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogSourceLookupResponse"];
                };
            };
            /** @description No log source found for this IP */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_log_sources_cache: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of log sources for caching */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (string)[][];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_log_source: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Log source ID to delete */
                source_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Log source deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Log source not found or access denied */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_baselines: {
        parameters: {
            query?: {
                /** @description Maximum number of results to return (default: 100, max: 1000) */
                limit?: number | null;
                /** @description Number of results to skip for pagination */
                offset?: number | null;
                /** @description Filter by entity type */
                entity_type?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Baselines retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaselinesListResponse"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_baselines: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBaselinesRequest"];
            };
        };
        responses: {
            /** @description Baselines created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_entity_baselines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity ID to get baselines for */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Entity baselines retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityBaselinesResponse"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
