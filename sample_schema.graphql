# Sample GraphQL Schema for Testing

type Query {
  getUser(id: ID!): User
  getUsers(limit: Int = 10, offset: Int = 0): [User!]!
  getOrder(id: ID!): Order
  getOrders(userId: ID, status: OrderStatus): [Order!]!
  getProduct(id: ID!): Product
  getProducts(category: String, inStock: Boolean): [Product!]!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  
  createOrder(input: CreateOrderInput!): Order!
  updateOrderStatus(id: ID!, status: OrderStatus!): Order!
  
  createProduct(input: CreateProductInput!): Product!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  orders: [Order!]!
  profile: UserProfile
}

type UserProfile {
  id: ID!
  userId: ID!
  bio: String
  avatar: String
  preferences: JSON
}

type Order {
  id: ID!
  userId: ID!
  user: User!
  status: OrderStatus!
  totalAmount: Float!
  currency: String!
  items: [OrderItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderItem {
  id: ID!
  orderId: ID!
  productId: ID!
  product: Product!
  quantity: Int!
  unitPrice: Float!
  totalPrice: Float!
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  currency: String!
  category: String!
  inStock: Boolean!
  stockQuantity: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
}

input CreateOrderInput {
  userId: ID!
  items: [OrderItemInput!]!
  currency: String = "USD"
}

input OrderItemInput {
  productId: ID!
  quantity: Int!
}

input CreateProductInput {
  name: String!
  description: String
  price: Float!
  currency: String = "USD"
  category: String!
  stockQuantity: Int!
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  category: String
  stockQuantity: Int
}

scalar DateTime
scalar JSON