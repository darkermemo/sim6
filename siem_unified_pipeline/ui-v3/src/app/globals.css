@import url("../styles/tokens.css");
@import "tailwindcss";

@custom-variant dark (&:is(.dark *));

/* Base layer uses tokens; variables come from tokens.css */
@layer base {
  * { border-color: hsl(var(--border)); }
  html { color-scheme: light dark; }
  body { background-color: hsl(var(--background)); color: hsl(var(--foreground)); font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; font-feature-settings: "rlig" 1, "calt" 1; line-height: 1.5; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
  :focus-visible { outline: none; box-shadow: 0 0 0 3px hsl(var(--ring) / .45); transition: box-shadow var(--dur-base); }
  /* Global anti-ghosting */
  html * { backdrop-filter: none !important; }
  
  /* Timeline bar heights - using direct inline styles now */
  
  /* Progress bar widths */
  [style*="--progress-width"] { width: var(--progress-width, 0%); }
  
  /* Progress transforms */
  [style*="--progress-transform"] { transform: var(--progress-transform, translateX(0)); }

  /* Global Solid UI Controller */
  :root {
    /* Overlay and surface tokens to control ALL overlays/menus globally */
    --overlay-bg: rgba(0,0,0,0.60);
    --surface-bg: hsl(var(--card));
    --surface-fg: hsl(var(--card-foreground));
    --surface-border: hsl(var(--border));
    --surface-focus: hsl(var(--muted));
  }
  .dark {
    --overlay-bg: rgba(0,0,0,0.60);
  }

  /* Apply solid surfaces to all Radix/shadcn portal contents via data-slot */
  [data-slot$="-content"],
  [data-slot$="-sub-content"],
  [data-slot$="-viewport"] {
    background-color: var(--surface-bg) !important;
    color: var(--surface-fg) !important;
    border: 1px solid var(--surface-border) !important;
    box-shadow: var(--elev-2);
  }

  /* Universal overlay color */
  [data-slot$="-overlay"] {
    background-color: var(--overlay-bg) !important;
  }

  /* Menu item focus/active */
  [data-slot$="-item"]:focus,
  [data-slot$="-sub-trigger"]:focus,
  [data-slot$="-item"][data-state="open"] {
    background-color: var(--surface-focus) !important;
    color: var(--surface-fg) !important;
  }

  /* Separators */
  [data-slot$="-separator"] {
    background-color: var(--surface-border) !important;
  }
}



:root {
  --sidebar: hsl(var(--k-rail-bg));
  --sidebar-foreground: hsl(var(--k-rail-icon));
  --sidebar-primary: hsl(var(--primary));
  --sidebar-primary-foreground: hsl(var(--primary-foreground));
  --sidebar-accent: hsl(var(--k-rail-hover));
  --sidebar-accent-foreground: hsl(0 0% 100%);
  --sidebar-border: hsl(var(--k-border-light));
  --sidebar-ring: hsl(var(--ring));
}

.dark {
  --sidebar: hsl(var(--k-rail-bg));
  --sidebar-foreground: hsl(var(--k-rail-icon));
  --sidebar-primary: hsl(var(--primary));
  --sidebar-primary-foreground: hsl(var(--primary-foreground));
  --sidebar-accent: hsl(var(--k-rail-hover));
  --sidebar-accent-foreground: hsl(0 0% 100%);
  --sidebar-border: hsl(var(--k-border-light));
  --sidebar-ring: hsl(var(--ring));
}

@theme inline {
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer utilities {
  .elev-1 { box-shadow: var(--elev-1); }
  .elev-2 { box-shadow: var(--elev-2); }
  .severity { @apply inline-flex items-center rounded-md px-2 py-0.5 text-xs font-medium; }
  .severity[data-level="critical"] { background-color: hsl(var(--sev-critical) / .15); color: hsl(var(--sev-critical)); }
  .severity[data-level="high"]     { background-color: hsl(var(--sev-high) / .15);     color: hsl(var(--sev-high)); }
  .severity[data-level="medium"]   { background-color: hsl(var(--sev-medium) / .18);   color: hsl(var(--sev-medium)); }
  .severity[data-level="low"]      { background-color: hsl(var(--sev-low) / .18);      color: hsl(var(--sev-low)); }
  .status-ok   { color: hsl(var(--status-ok)); }
  .status-warn { color: hsl(var(--status-warn)); }
  .status-bad  { color: hsl(var(--status-bad)); }
}
