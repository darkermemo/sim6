use axum::{routing::get, Router, extract::State};
use crate::v2::handlers::alert_rules::import_sigma_pack;
use std::sync::Arc;
use tower_http::{cors::CorsLayer, trace::TraceLayer, services::{ServeDir, ServeFile}};
use crate::v2::{handlers::{health::health_check, health_advanced::{health_summary, health_stream, health_diagnose, health_autofix, health_errors, health_executions, health_execution_by_id}, events::{search_events, search_events_compact, insert_events}, sse::{stream_stub, tail_stream}, metrics::{get_eps_stats, get_quick_stats, get_ch_status, get_parsing_stats, get_system_config, get_kafka_status, get_redis_status, get_vector_status, get_ch_storage, get_kafka_partitions, get_redis_memory}, ingest::ingest_raw, alerts::{list_alerts, get_alert, patch_alert}, assets::favicon, alert_rules::{list_alert_rules, sigma_compile, sigma_create, rule_dry_run, rule_run_now, create_rule, get_rule, patch_rule, delete_rule}, search::{search_execute, search_estimate, search_facets}, schema::{get_fields, get_enums}, detections::{compile_detection, run_detection, test_detection}, incidents::{list_incidents, get_incident, patch_incident, incident_alerts}, detections_crud::{create_detection, list_detections, get_detection, update_detection, delete_detection, schedule_detection, run_once}}, state::AppState, compiler, dashboard_metrics};
use crate::v2::metrics as v2metrics;
use crate::v2::search_api;

pub fn build(state: AppState) -> Router {
    let state = Arc::new(state);
    v2metrics::init();
    let search = search_api::routes(state.clone());
    Router::new()
        .route("/favicon.ico", get(favicon))
        .route("/health", get(health_check))
        .route("/api/v2/health", get(health_check))
        // Advanced health endpoints
        .route("/api/v2/health/summary", get(health_summary))
        .route("/api/v2/health/stream", get(health_stream))
        .route("/api/v2/health/errors", get(health_errors))
        .route("/api/v2/health/executions", get(health_executions))
        .route("/api/v2/health/executions/:id", get(health_execution_by_id))
        .route("/api/v2/health/diagnose", axum::routing::post(health_diagnose))
        .route("/api/v2/health/autofix", axum::routing::post(health_autofix))
        .route("/api/v2/events/search", get(search_events))
        .route("/api/v2/events/search_compact", get(search_events_compact))
        .route("/api/v2/events/stream/ch", get(stream_stub))
        .route("/api/v2/events/stream/tail", get(tail_stream))
        .route("/api/v2/events/insert", axum::routing::post(insert_events))
        .route("/api/v2/metrics/eps", get(get_eps_stats))
        .route("/api/v2/metrics/quick", get(get_quick_stats))
        .route("/api/v2/metrics/ch_status", get(get_ch_status))
        .route("/api/v2/metrics/parsing", get(get_parsing_stats))
        .route("/api/v2/metrics/kafka", get(get_kafka_status))
        .route("/api/v2/metrics/redis", get(get_redis_status))
        .route("/api/v2/metrics/vector", get(get_vector_status))
        .route("/api/v2/metrics/ch_storage", get(get_ch_storage))
        .route("/api/v2/metrics/kafka_partitions", get(get_kafka_partitions))
        .route("/api/v2/metrics/redis_memory", get(get_redis_memory))
        // Dashboard metrics (time-series for UI charts)
        .nest("/api/v2/dashboard", dashboard_metrics::routes(state.clone()))
        // New Search API (simple-body compile/execute/aggs)
        .merge(search)
        .route("/api/v2/search/estimate", axum::routing::post(search_estimate))
         // Saved searches CRUD provided by search_api routes; avoid duplicates here
        .route("/api/v2/schema/fields", get(get_fields))
        .route("/api/v2/schema/enums", get(get_enums))
        // World-class detection endpoints
        .route("/api/v2/detections/compile", axum::routing::post(compile_detection))
        .route("/api/v2/detections/run", axum::routing::post(run_detection))
        .route("/api/v2/detections/test", axum::routing::post(test_detection))
        // Detections CRUD + scheduler
        .route("/api/v2/detections", axum::routing::post(create_detection))
        .route("/api/v2/detections", axum::routing::get(list_detections))
        .route("/api/v2/detections/:id", axum::routing::get(get_detection))
        .route("/api/v2/detections/:id", axum::routing::put(update_detection))
        .route("/api/v2/detections/:id", axum::routing::delete(delete_detection))
        .route("/api/v2/detections/:id/schedule", axum::routing::post(schedule_detection))
        .route("/api/v2/detections/:id/run-once", axum::routing::post(run_once))
        .route("/api/v2/system/config", get(get_system_config))
        .route("/metrics", get(|| async { v2metrics::metrics_text().await }))
         .route("/api/v2/admin/config", get(crate::v2::handlers::admin::get_config))
         .route("/api/v2/admin/config", axum::routing::put(crate::v2::handlers::admin::put_config))
         // Tenants & limits
         .route("/api/v2/admin/tenants", get(crate::v2::handlers::admin_tenants::list_tenants))
         .route("/api/v2/admin/tenants", axum::routing::post(crate::v2::handlers::admin_tenants::create_tenant))
         .route("/api/v2/admin/tenants/:id", get(crate::v2::handlers::admin_tenants::get_tenant))
         .route("/api/v2/admin/tenants/:id", axum::routing::patch(crate::v2::handlers::admin_tenants::patch_tenant))
         .route("/api/v2/admin/tenants/:id", axum::routing::delete(crate::v2::handlers::admin_tenants::delete_tenant))
         .route("/api/v2/admin/tenants/:id/limits", get(crate::v2::handlers::admin_tenants::get_limits))
         .route("/api/v2/admin/tenants/:id/limits", axum::routing::put(crate::v2::handlers::admin_tenants::put_limits))
         .route("/api/v2/admin/metrics/eps", get(crate::v2::handlers::admin_tenants::get_eps))
          .route("/api/v2/ingest/raw", axum::routing::post(ingest_raw))
         .route("/api/v2/ingest/bulk", axum::routing::post(crate::v2::handlers::ingest::ingest_bulk))
         .route("/api/v2/ingest/ndjson", axum::routing::post(crate::v2::handlers::ingest::ingest_bulk))
         // Parse & Normalize
         .route("/api/v2/parse/detect", axum::routing::post(crate::v2::handlers::parse::detect))
         .route("/api/v2/parse/normalize", axum::routing::post(crate::v2::handlers::parse::normalize))
         // Log Sources & Parsers (legacy sources stubs and parser toggle)
         .route("/api/v2/sources", get(crate::v2::handlers::sources::list_sources))
         .route("/api/v2/sources", axum::routing::post(crate::v2::handlers::sources::create_source))
         .route("/api/v2/sources/:id", get(crate::v2::handlers::sources::get_source))
         .route("/api/v2/sources/:id", axum::routing::patch(crate::v2::handlers::sources::patch_source))
         .route("/api/v2/sources/:id/test-ingest", axum::routing::post(crate::v2::handlers::sources::test_ingest))
         .route("/api/v2/sources/:id/deploy", axum::routing::post(crate::v2::handlers::sources::deploy_source))
         .route("/api/v2/admin/parsers/toggle", axum::routing::post(crate::v2::handlers::parsers::toggle_parser))
         // CIM
         .route("/api/v2/cim/validate", axum::routing::post(crate::v2::handlers::cim::cim_validate))
         .route("/api/v2/cim/coverage", get(crate::v2::handlers::cim::get_coverage))
        .route("/api/v2/alerts", get(list_alerts))
        .route("/api/v2/alerts/:id", get(get_alert))
        .route("/api/v2/alerts/:id", axum::routing::patch(patch_alert))
        .route("/api/v2/alerts/:id/notes", axum::routing::post(crate::v2::handlers::alerts::add_note))
        .route("/api/v2/alert_rules", get(|state: axum::extract::State<std::sync::Arc<AppState>>, q: axum::extract::Query<crate::v2::handlers::alert_rules::RulesListQ>| async move { list_alert_rules(state, q).await }))
        .route("/api/v2/rules/sigma/compile", axum::routing::post(sigma_compile))
        .route("/api/v2/rules/sigma", axum::routing::post(sigma_create))
        .route("/api/v2/rules", axum::routing::post(create_rule))
        .route("/api/v2/admin/rules/import-sigma-pack", axum::routing::post(import_sigma_pack))
        .route("/api/v2/rules/:id", get(get_rule))
        .route("/api/v2/rules/:id", axum::routing::patch(patch_rule))
        .route("/api/v2/rules/:id", axum::routing::delete(delete_rule))
        .route("/api/v2/rules/:id/dry-run", axum::routing::post(rule_dry_run))
        .route("/api/v2/rules/:id/run-now", axum::routing::post(rule_run_now))
         // Streaming admin
         .route("/api/v2/admin/streaming/status", axum::routing::get(crate::v2::handlers::admin_streaming::streaming_status))
         .route("/api/v2/admin/streaming/reclaim", axum::routing::post(crate::v2::handlers::admin_streaming::streaming_reclaim))
         // Incidents APIs
         .route("/api/v2/incidents", get(|state: axum::extract::State<std::sync::Arc<AppState>>, q: axum::extract::Query<crate::v2::handlers::incidents::ListQuery>| async move { list_incidents(state, q).await }))
         .route("/api/v2/incidents/:id", get(get_incident))
         .route("/api/v2/incidents/:id", axum::routing::patch(patch_incident))
         .route("/api/v2/incidents/:id/alerts", get(incident_alerts))
         .route("/api/v2/incidents/:id/timeline", get(crate::v2::handlers::incidents::incident_timeline))
         .route("/api/v2/incidents/:id/alerts/bulk", axum::routing::post(crate::v2::handlers::incidents::incident_alerts_bulk))
         // Investigator graph
         .route("/api/v2/investigate/graph", axum::routing::post(crate::v2::handlers::investigate::graph))
         .route("/dev/admin/run_incident_aggregator", axum::routing::post(crate::v2::handlers::incidents::run_aggregator_once))
        // Convenience aliases for dev pages
        .route_service("/dev", ServeFile::new("web/v2-events.html"))
        .route_service("/dev/v2-events", ServeFile::new("web/v2-events.html"))
        .route_service("/dev/rules", ServeFile::new("web/rules.html"))
        .route_service("/dev/apis", ServeFile::new("web/apis.html"))
        .route_service("/dev/stream", ServeFile::new("web/stream.html"))
        // Serve from process CWD (siem_unified_pipeline)
         .route_service("/dev/admin/index.html", ServeFile::new("ui/v2/admin/index.html"))
         .route_service("/dev/admin/log-sources.html", ServeFile::new("ui/v2/admin/log-sources.html"))
         .route_service("/dev/admin/tenants.html", ServeFile::new("ui/v2/admin/tenants.html"))
         .route_service("/dev/admin/parsers.html", ServeFile::new("ui/v2/admin/parsers.html"))
         .route_service("/dev/admin/rules.html", ServeFile::new("ui/v2/admin/rules.html"))
         .route_service("/dev/admin/streaming.html", ServeFile::new("ui/v2/admin/streaming.html"))
         .route_service("/dev/search.html", ServeFile::new("ui/v2/search.html"))
         .route_service("/dev/alerts.html", ServeFile::new("ui/v2/alerts.html"))
         .route_service("/dev/investigations/index.html", ServeFile::new("ui/v2/investigations/index.html"))
         .route_service("/ui/v2/admin/index.html", ServeFile::new("ui/v2/admin/index.html"))
         .route_service("/ui/v2/admin/tenants.html", ServeFile::new("ui/v2/admin/tenants.html"))
         .route_service("/ui/v2/admin/log-sources.html", ServeFile::new("ui/v2/admin/log-sources.html"))
         .route_service("/ui/v2/admin/parsers.html", ServeFile::new("ui/v2/admin/parsers.html"))
          .route_service("/ui/v2/admin/api-keys.html", ServeFile::new("ui/v2/admin/api-keys.html"))
         .route_service("/ui/v2/admin/cim.html", ServeFile::new("ui/v2/admin/cim.html"))
         .route_service("/ui/v2/admin/sigma.html", ServeFile::new("ui/v2/admin/sigma.html"))
         .route_service("/ui/v2/admin/ingestors.html", ServeFile::new("ui/v2/admin/ingestors.html"))
         .route_service("/ui/v2/admin/streaming.html", ServeFile::new("ui/v2/admin/streaming.html"))
          .route_service("/ui/v2/admin/storage.html", ServeFile::new("ui/v2/admin/storage.html"))
         .route_service("/ui/v2/search.html", ServeFile::new("ui/v2/search.html"))
         .route_service("/ui/v2/alerts.html", ServeFile::new("ui/v2/alerts.html"))
         // Investigations API
         .route("/api/v2/investigations/views", get(crate::v2::handlers::investigations::list_views))
         .route("/api/v2/investigations/views", axum::routing::post(crate::v2::handlers::investigations::create_view))
         .route("/api/v2/investigations/views/:id", get(crate::v2::handlers::investigations::get_view))
         .route("/api/v2/investigations/views/:id", axum::routing::delete(crate::v2::handlers::investigations::delete_view))
         .route("/api/v2/investigations/views/:id/notes", get(crate::v2::handlers::investigations::list_notes))
         .route("/api/v2/investigations/notes", axum::routing::post(crate::v2::handlers::investigations::create_note))
          .nest_service("/dev/ui", ServeDir::new("ui"))
          // Experimental React app (served from ui-react/dist) - SPA fallback for any /ui/app/* path
          .nest_service(
            "/ui/app",
            axum::routing::get_service(
              ServeDir::new("ui-react/dist").fallback(ServeFile::new("ui-react/dist/index.html"))
            )
          )
          .nest_service("/ui", ServeDir::new("ui"))
         // Admin Log Sources CRUD
         .route("/api/v2/admin/log-sources", axum::routing::get(crate::v2::handlers::admin_log_sources::list_sources))
         .route("/api/v2/admin/log-sources", axum::routing::post(crate::v2::handlers::admin_log_sources::create_source))
         .route("/api/v2/admin/log-sources/:source_id", axum::routing::get(crate::v2::handlers::admin_log_sources::get_source))
         .route("/api/v2/admin/log-sources/:source_id", axum::routing::put(crate::v2::handlers::admin_log_sources::update_source))
         .route("/api/v2/admin/log-sources/:source_id", axum::routing::delete(crate::v2::handlers::admin_log_sources::delete_source))
         // Admin Parsers
         .route("/api/v2/admin/parsers", axum::routing::get(crate::v2::handlers::admin_parsers::list_parsers))
         .route("/api/v2/admin/parsers", axum::routing::post(crate::v2::handlers::admin_parsers::create_parser))
         .route("/api/v2/admin/parsers/:parser_id", axum::routing::get(crate::v2::handlers::admin_parsers::get_parser))
         .route("/api/v2/admin/parsers/:parser_id", axum::routing::put(crate::v2::handlers::admin_parsers::update_parser))
         .route("/api/v2/admin/parsers/:parser_id", axum::routing::delete(crate::v2::handlers::admin_parsers::delete_parser))
          // Admin Storage Policies (retention/compression)
          .route("/api/v2/admin/storage/:tenant", axum::routing::get(crate::v2::handlers::admin_storage::get_storage))
          .route("/api/v2/admin/storage/:tenant", axum::routing::put(crate::v2::handlers::admin_storage::put_storage))
          // Admin API Keys
          .route("/api/v2/admin/api-keys", axum::routing::get(crate::v2::handlers::admin_api_keys::list_keys))
          .route("/api/v2/admin/api-keys", axum::routing::post(crate::v2::handlers::admin_api_keys::create_key))
          .route("/api/v2/admin/api-keys/:key_id", axum::routing::get(crate::v2::handlers::admin_api_keys::get_key))
          .route("/api/v2/admin/api-keys/:key_id", axum::routing::put(crate::v2::handlers::admin_api_keys::update_key))
          .route("/api/v2/admin/api-keys/:key_id", axum::routing::delete(crate::v2::handlers::admin_api_keys::delete_key))
        .layer(TraceLayer::new_for_http())
        .layer(CorsLayer::permissive())
        .with_state(state)
}


