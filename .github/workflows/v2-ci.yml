name: v2-ci

on:
  push:
    branches: [ main, feat/** ]
  pull_request:
    branches: [ main, feat/** ]

jobs:
  v2_pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:23.8
        ports:
          - 8123:8123
          - 9000:9000
        options: >-
          --health-cmd "bash -c 'curl -s http://localhost:8123/ping || exit 1'"
          --health-interval 3s
          --health-timeout 2s
          --health-retries 60
    env:
      CLICKHOUSE_URL: http://127.0.0.1:8123
      EVENTS_TABLE: dev.events
      RUSTFLAGS: -D warnings
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Wait for ClickHouse
        run: |
          for i in {1..60}; do
            if curl -sS ${CLICKHOUSE_URL}/ping >/dev/null; then echo OK; exit 0; fi
            sleep 1
          done
          echo "ClickHouse did not become ready" >&2
          exit 1

      - name: Apply migrations
        run: bash ./database_migrations/apply-migrations.sh

      - name: Build (Rust)
        working-directory: ./siem_unified_pipeline
        run: |
          cargo clippy -- -D warnings
          cargo build --bins

      - name: Run tests (Rust)
        working-directory: ./siem_unified_pipeline
        run: cargo test --all --quiet

      - name: Start API
        working-directory: ./siem_unified_pipeline
        env:
          RUST_LOG: info
          CLICKHOUSE_URL: ${{ env.CLICKHOUSE_URL }}
          EVENTS_TABLE: ${{ env.EVENTS_TABLE }}
        run: |
          nohup cargo run --bin siem-pipeline > ../target/test-artifacts/api_stdout.log 2> ../target/test-artifacts/api_stderr.log &
          echo $! > ../target/test-artifacts/api_pid.txt
          for i in {1..60}; do
            if curl -sS http://127.0.0.1:9999/api/v2/health >/dev/null; then echo healthy; break; fi
            sleep 1
          done
          curl -sS http://127.0.0.1:9999/api/v2/health > ../target/test-artifacts/wire_health.json

      - name: Capture live DDL and API samples
        run: |
          ART=./target/test-artifacts
          mkdir -p "$ART"
          clickhouse client -q "SHOW CREATE TABLE dev.events FORMAT Pretty" > "$ART/wire_schema_events.sql" || true
          clickhouse client -q "SHOW CREATE TABLE dev.alerts FORMAT Pretty" > "$ART/wire_schema_alerts.sql" || true
          clickhouse client -q "SHOW CREATE TABLE dev.alert_rules FORMAT Pretty" > "$ART/wire_schema_alert_rules.sql" || true
          clickhouse client -q "SHOW CREATE TABLE dev.rule_state FORMAT Pretty" > "$ART/wire_schema_rule_state.sql" || true
          clickhouse client -q "SHOW CREATE TABLE dev.parsers_admin FORMAT Pretty" > "$ART/wire_schema_parsers_admin.sql" || true
          clickhouse client -q "SHOW CREATE TABLE dev.log_sources_admin FORMAT Pretty" > "$ART/wire_schema_log_sources_admin.sql" || true
          printf "%s" '{"tenant_id":"default","time":{"last_seconds":600},"q":"message:fail"}' > "$ART/search_compile_body.json"
          cp "$ART/search_compile_body.json" "$ART/search_execute_body.json"
          curl -sS -X POST http://127.0.0.1:9999/api/v2/search/compile --header Content-Type:application/json --data-binary @"$ART/search_compile_body.json" -o "$ART/wire_search_compile.json"
          curl -sS -X POST http://127.0.0.1:9999/api/v2/search/execute --header Content-Type:application/json --data-binary @"$ART/search_execute_body.json" -o "$ART/wire_search_execute.json"
          curl -sS "http://127.0.0.1:9999/api/v2/alerts?limit=3" > "$ART/wire_alerts.json" || true
          curl -sS "http://127.0.0.1:9999/api/v2/admin/parsers?limit=3" > "$ART/wire_parsers_list.json" || true
          curl -sS "http://127.0.0.1:9999/api/v2/admin/log-sources?tenant_id=default&limit=3" > "$ART/wire_log_sources_list.json" || true
          curl -sS "http://127.0.0.1:9999/metrics" > "$ART/wire_metrics.txt" || true

      - name: Run admin parsers CRUD proof
        run: bash ./scripts/admin_parsers_proof.sh

      - name: Run admin log-sources CRUD proof
        run: bash ./scripts/admin_log_sources_proof.sh

      - name: Filter metrics keys
        run: |
          awk '/^siem_v2_(ingest_total|rate_limit_total|rules_run_total|alerts_written_total|stream_(enqueue_total|ack_total|eval_errors_total|lag_ms))/{print}' ./target/test-artifacts/wire_metrics.txt > ./target/test-artifacts/wire_metrics_keys.txt || true

      - name: Sync wire fixtures to UI
        run: |
          mkdir -p ./siem_unified_pipeline/ui-react/fixtures
          cp -f ./target/test-artifacts/wire_*.json ./siem_unified_pipeline/ui-react/fixtures/ || true

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: siem_unified_pipeline/ui-react/package-lock.json

      - name: Install UI deps
        working-directory: ./siem_unified_pipeline/ui-react
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build UI and run unit tests
        working-directory: ./siem_unified_pipeline/ui-react
        run: |
          npm run -s build
          npm run -s test

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v2-proof-artifacts
          path: |
            ./siem_unified_pipeline/target/test-artifacts/**
            ./target/test-artifacts/**
            ./siem_unified_pipeline/ui-react/fixtures/**
            ./siem_unified_pipeline/ui-react/test-results/**
          if-no-files-found: warn

      - name: Stop API
        if: always()
        run: |
          if [ -f ./siem_unified_pipeline/target/test-artifacts/api_pid.txt ]; then kill -9 $(cat ./siem_unified_pipeline/target/test-artifacts/api_pid.txt) || true; fi

      - name: Run storage policy proof (non-blocking)
        run: |
          bash ./scripts/storage_policies_proof.sh || true

      - name: Upload storage policy artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: storage-policy-artifacts
          path: |
            ./target/test-artifacts/ch_version.txt
            ./target/test-artifacts/ch_storage_policies.txt
            ./target/test-artifacts/ch_volumes.txt
            ./target/test-artifacts/ch_tables_settings.txt
            ./target/test-artifacts/ttl_probe_before.tsv
            ./target/test-artifacts/ttl_probe_after.tsv
            ./target/test-artifacts/ttl_probe_parts_before.tsv
            ./target/test-artifacts/ttl_probe_parts_after.tsv
            ./target/test-artifacts/verify_notes.txt
          if-no-files-found: warn


